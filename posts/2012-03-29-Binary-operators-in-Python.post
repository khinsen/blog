;;;;;
title: Binary operators in Python
tags: programming
date: 2012-03-29 10:02:59
format: html
;;;;;
<p>A two-hour train journey provided the opportunity to watch the video recording of the <a href="http://marakana.com/s/2012_pydata_workshop_panel_with_guido_van_rossum,1091/index.html">Panel with Guido van Rossum</a> at the recent <a href="https://pydataworkshop.eventbrite.com/">PyData Workshop</a>. The lengthy discussion about <a href="http://www.python.org/dev/peps/pep-0225/">PEP 225</a> (which proposes to add additional operators to Python that would enable to have both elementwise and aggregate operations on the same objects, in particular for providing both matrix and elementwise multiplication on arrays with a nice syntax) motivated me to write up my own thoughts about what's wrong with operators in Python from my computational scientist's point of view.</p><p>The real problem I see is that operators map to methods. In Python, <code>a*b</code> is just syntactic sugar for <code>a.__mul__(b)</code>. This means that it's the type of <code>a</code> that decides how to do the multiplication. The method implementing this operation can of course check the type of <code>b</code>, and it can even decide to give up and let <code>b</code> handle everything, in which case Python does <code>b.__rmul__(a)</code>. But this is just a kludge to work around the real weakness of the operators-map-to-methods approach. Binary operators fundamentally require a dispatch on <i>both</i> types, the type of <code>a</code> and the type of <code>b</code>. What <code>a*b</code> <i>should</i> map to is <code>__builtins__.__mul__(a, b)</code>, a global function that would then implement a binary dispatch operation. Implementing that dispatch would in fact be the real problem to solve, as Python currently has no multiple dispatch mechanisms at all.</p><p>But would multiple dispatch solve the issue addressed by PEP 225? Not at all, directly. But it would make some of the alternatives mentioned there feasible. A proper multiple dispatch system would allow NumPy (or any other library) to decide what multiplication of its own objects by a number means, no matter if the number is the first or the second factor.</p><p>More importantly, multiple dispatch would allow a major cleanup of many scientific packages, including NumPy, and even clean up the basic Python language by getting rid of <code>__rmul__</code> and friends. NumPy's current aggressive handling of binary operations is actually more of a problem for me than the lack of a nice syntax for matrix multiplication.</p><p>There are many details that would need to be discussed before binary dispatch could be proposed as a PEP. Of course the old method-based approach would need to remain in place as a fallback, to ensure compatibility with existing code. But the real work is defining a good multiple dispatch system that integrates well with Python's dynamical type system and allows the right kind of extensibility. That same multiple dispatch method could then also be made available for use in plain functions.</p>
