;;;;;
title: Monads in Clojure
tags: programming
date: 2009-04-22 16:39:25
format: html
;;;;;
One of my hobby projects over the last months has been the exploration of monads. Monads are packages consisting of a data structure and associated control structures that are used as abstractions in functional programming. They were popularized by the Haskell language, where they play a central role in introducing side effects (such as I/O) in a controlled way into a language that is otherwise purely functional.<br><br>Since I was also exploring <a href="http://clojure.org/">Clojure</a>, an interesting new dialect of Lisp that strongly encourages a purely functional programming style (but doesn't enforce it), I decided to explore monads by writing a <a>monad library</a> for Clojure. My experience is that monads are quite useful in Clojure as well, and that once you get used to monads, you see occasions for using them almost everywhere. If you have been hesitating to tackle monads seriously, I can only encourage you to go on!<br><br>I have also written a monad tutorial for Clojure programmers, which I published on the <a title="OnClojure blog" href="http://onclojure.com/">OnClojure</a> blog. It consists of four parts:<br><ol><br>	<li><a href="http://onclojure.com/2009/03/05/a-monad-tutorial-for-clojure-programmers-part-1/">Part 1</a> introduces the concept of monads and illustrates it with the identity and maybe monads.</li><br>	<li><a href="http://onclojure.com/2009/03/06/a-monad-tutorial-for-clojure-programmers-part-2/">Part 2</a> explains the importance of <code>m-result</code> using the sequence monad as an example. It also covers the monad laws.</li><br>	<li><a href="http://onclojure.com/2009/03/23/a-monad-tutorial-for-clojure-programmers-part-3/">Part 3</a> is about m-zero and m-plus, and explains the state monad.</li><br>	<li><a href="http://onclojure.com/2009/03/23/a-monad-tutorial-for-clojure-programmers-part-4/">Part 4</a> covers the probability monad and monad transformers.</li><br></ol><br>I hope that this tutorial facilitates a first contact with monads for those who are more familiar with Lisp syntax than with Haskell syntax.
