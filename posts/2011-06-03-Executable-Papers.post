;;;;;
title: Executable Papers
tags: Programming, Science
date: 2011-06-03 13:24:47
format: html
;;;;;
The last two days I participated in the "Executable Papers workshop" at this year's <a href="http://www.iccs-meeting.org/" title="International Conference on Computational Science">ICCS conference</a>. It was not just another workshop among the many ICCS workshops. The participants had all submitted a proposal to the "<a href="http://www.executablepapers.com/">Executable Paper Grand Challenge</a>" run by Elsevier, one of the biggest scientific publishers. On the first day, the nine finalists presented their work, and on the second day, the remaining accepted proposals were presented.<br><br>The term "executable papers" stands for the expected next revolution in scientific publishing. The move from printed journals to electronic on-line journals (or a combination of both) has changed little for authors and readers. It is the libraries that have seen the largest impact because they now do little more than paying subscription fees. Readers obtain papers as PDF files directly from the publishers' Web sites. The one change that does matter to scientists is that most journals now propose the distribute "supplementary material" in addition to the main paper. This can in principle be any kind of file, in practice it is mostly used for additional explanations, images, and tables, i.e. to keep the main paper shorter. Occasionally there are also videos, a first step towards exploring the new possibilities opened up by electronic distribution. The step to executable papers is a much bigger one: the goal is to integrate computer-readable data and executable program code together with the text part of a paper. The goals are a richer reader experience (e.g. interactive visualizations), verifiability of results by both referees and readers (by re-running part of the computations described in the paper), and re-use of data and code in later work by the same or other authors. There is some overlap in these goals with the "<a href="http://reproducibleresearch.net/index.php/Main_Page">reproducible research</a>" movement, whose goal is to make computational research reproducible by providing tools and methods that permit to store a trace of everything that entered into some computational procedure (input data, program code, description of the computing environment) such that someone else (or even the original author a month later) can re-run everything and obtain the same results. The new aspect in executable papers is the packaging and distribution of everything, as well as the handling of bibliographic references.<br><br>The proposals' variety mostly reflected the different background of the presenters. A mathematician documenting proofs obviously has different needs than an astrophysicist simulating a supernova on a supercomputer. Unfortunately this important aspect was never explicitly discussed. Most presenters did not even mention their field of work, much less what it implies in terms of data handling. This was probably due to the enormous time pressure; 15 to 20 minutes for a presentation plus demonstration of a complex tool was clearly not enough.<br><br>The proposals could roughly be grouped into three categories:<br><ul><br>	<li>Web-based tools that permit the author to compose his executable paper by supplying data, code, and text, and permit the reviewer and reader to consult this material and re-run computations.</li><br>	<li>Systems for preserving the author's computational environment in order to permit reviewers and readers to use the author's software with little effort and without any security risks.</li><br>	<li>Semantic markup systems that make parts of the written text interpretable by a computer for various kinds of processing</li><br></ul><br>Some proposals covered two of these categories but with a clear emphasis on one of them. For the details of each propsal, see the <a href="http://www.sciencedirect.com/science/journal/18770509">ICCS proceedings</a> which are freely available.<br><br>While it was interesting to see all the different ideas presented, my main impression of the Executable Paper Workshop is that of a missed opportunity. Having all those people who had thought long and hard about the various issues in one room for two days would have been a unique occasion to make progress towards better tools for the future. In fact, none of the solutions presented cover the needs of the all the domains of computational science. They make assumptions about the nature of the data and the code that are not universally valid. One or two hours of discussion might have helped a lot to improve everyone's tools.<br><br>The implementation of my own proposal, which addresses the questions of how to store code and data in a flexible, efficient, and future-proof way, is available <a href="http://dirac.cnrs-orleans.fr/plone/software/activepapers">here</a>. It contains a multi-platform binary (MacOS, Linux, Windows, all on the x86 platform) and requires version 6 of the Java Runtime Environment. The source code is also included, but there is no build system at the moment (I use a collection of scripts that have my home-directory hard-coded in lots of places). There is, however, a tutorial. Feedback is welcome!<br>
