;;;;;
title: The ultimate calculator for Android and iOS
tags: computational science, programming
date: 2012-09-07 14:00:13
format: html
;;;;;
Calculators are among the most popular applications for smartphones, and therefore it is not surprising that the Google Play Store has more than 1000 calculators for the Android platform. Having used HP's scientific calculators for more than 20 years, I picked RealCalc when I got my Android phone and set it to RPN mode. It works fine, I have no complaints about it. But I no longer use it because I found something much more powerful.<br><br>It's called "<a href="http://www.jsoftware.com/">J</a>", which isn't exactly a very descriptive name. And that's probably a good idea because describing it it not so easy. J is much more than a calculator, but it does the calculator job very well. It's actually a full programming language, but one that differs substantially from everything else that goes by that label. The best description for J I can come up with is "executable mathematical notation". You type an expression, and you get the result. That's in fact not very different from working interactively with Python or Matlab, except that the expressions are very different. You can write traditional programs in J, using loops, conditionals, etc., but you can a lot of work done without ever using these features.<br><br>The basic data structure in J is the array, which can have any number of dimensions. Array elements can be numbers, characters, or other arrays. Numbers (zero-dimensional arrays) and text strings (one-dimensional arrays of characters) are just special cases. In J jargon, which takes its inspiration from linguistics, data items are called "nouns". Standard mathematical operators (such as <code>+</code> or <code>-</code>) are called "verbs" and can have one or two arguments (one left, one right). An expression is called a "sentence". There are no precedence rules, the right argument of any verb being everything to its right. Given the large number of verbs in J, this initially unfamiliar rule makes a lot of sense. A simple example (also showing the use of arrays) is<br><pre>   2 * 3 + 10 20 30<br>26 46 66</pre><br>Up to here, J expressions are not very different from Python or Matlab expressions. What J doesn't have is functions with the familiar <em>f(x, y, z)</em> syntax, accepting any number of arguments. There are only verbs, with one or two arguments. But what makes J really different from the well-known languages for scientific computing are the "parts of speech" that have no simple equivalent elsewhere: adverbs and conjunctions.<br><br>An adverb takes a verb argument and produces a derived verb from it. For example, the adverb <code>~</code> takes a two-argument verb (a <em>dyad</em> in J jargon) and turns it into a one-argument verb (a <em>monad</em>) that's equivalent to using the dyad with two equal arguments. With <code>+</code> standing for plain addition, <code>+~</code> thus doubles its argument:<br><pre>   +~ 1 5 10 20<br>2 10 20 40</pre><br>meaning it is the same as<br><pre>   1 5 10 20 + 1 5 10 20<br>2 10 20 40</pre><br>A conjunction combines a verb with a noun or another verb to produce a derived verb. An example is ^:, the power conjunction, which applies a verb several times:<br><pre>   +~(^:2) 1 5 10 20<br>4 20 40 80<br>   +~(^:3) 1 5 10 20<br>8 40 80 160</pre><br>The parentheses are required to separate the argument of the power conjunction (2 or 3) from the array that is the argument to the resulting derived verb. To see the real power of the power conjunction, consider that it accepts <em>negative</em> arguments as well:<br><pre>   +~(^:_1) 1 5 10 20<br>0.5 2.5 5 10</pre><br>You have seen right: J can figure out that the inverse of adding a number to itself is dividing that number by two!<br><br>Pretty much any programming language permits you to assign values to names for re-use in later expressions. J is no exception:<br><pre>   data =. 1 5 10 20<br>   double =. +~<br>   double data<br>2 10 20 40<br>   inv =. ^:_1<br>   halve =. double inv<br>   halve data<br>0.5 2.5 5 10</pre><br>As you can see, names can be given not just to nouns (i.e. data), but also to verbs, adverbs, and conjunctions. Most J programs are just pieces of expressions that are assigned to names. Which means that the short summary of J that I have given here could well be all you ever need to know about the language - apart from the fact that you will have to acquire a working knowledge of many more verbs, adverbs, and conjunctions.<br><br>Before you rush off to the Play Store looking for J, let me add that J is not yet there, although it's supposed to arrive soon. For now, you have to <a href="https://github.com/mdykman/jconsole_for_android/tree/master/dist">download the APK</a> and install it yourself, using your preferred Android file manager. I should also point out that J is not just for Android. It's been around for more than 20 years, and you can get J for all the common computing platforms from <a href="http://jsoftware.com/">Jsoftware</a>. There's also an <a href="http://itunes.apple.com/us/app/j-programming-language/id532587550?mt%3D8">iOS</a> version for the iPhone and iPad. J's extreme terseness is a perfect fit for smartphones, where screen space is a scarce resource and where every character you don't have to type saves you a lot of time.
